// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ALU(x=x, y=y,  zx=instruction[5], 
                    nx=instruction[4], 
                    zy=instruction[3], 
                    ny=instruction[2], 
                    f=instruction[1], 
                    no=instruction[0], 
                    out=regOut, 
                    zr=regZr, 
                    ng=regNg);
     
     ShiftRight(in = x, out = xShr);
     ShiftRight(in = y, out = yShr);
     ShiftLeft(in = x, out = xShl);
     ShiftLeft(in = y, out = yShl);
     
     Mux16(a=yShr, b=yShl, sel=instruction[5], out=yShift);
     Mux16(a=xShr, b=xShl, sel=instruction[5], out=xShift);
     Mux16(a=yShift, b=xShift, sel=instruction[4], out=shiftOut);

     // If the shift operation result in zero
     Or16Way(in=shiftOut, out=shiftNotZero);
     
     Not(in=shiftNotZero, out=shiftZr);
     
     // Select the out
     Mux16(a=shiftOut, b=regOut, sel=instruction[8], out=out);
     // Select the zr flag
     Mux(a=shiftZr, b=regZr, sel=instruction[8], out=zr);

     Or16(a=shiftOut, b=shiftOut, out[15]=shiftOutNeg);
     
     // Select then ng flag
     Mux(a=shiftOutNeg, b=regNg, sel=instruction[8], out=ng);
     
}
