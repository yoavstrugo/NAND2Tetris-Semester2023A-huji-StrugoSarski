// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    Mux16(a=false, b=false, sel=reset, out=muxOutReset); // reset

    // unset the load bit if the reset bit is set
    Not(in=reset, out=notReset);
    And(a=notReset, b=load, out=loadAndNotReset);

    Mux16(a=false, b=in, sel=loadAndNotReset, out=muxOutLoad); // load

    // unset the inc bit if reset ot load bit are set
    Not(in=load, out=notLoad);
    And(a=notReset, b=inc, out=notResetAndInc);
    And(a=notResetAndInc, b=notLoad, out=notResetAndIncAndNotLoad);

    Inc16(in=dffOut, out=dffOutInc); // inc
    Mux16(a=false, b=dffOutInc, sel=notResetAndIncAndNotLoad, out=muxOutInc);
    
    Or16(a=muxOutReset, b=muxOutLoad, out=muxOut1);
    Or16(a=muxOut1, b=muxOutInc, out=muxOut);
    
    Register(in=muxOut, load=true, out=dffOut);    
    Or16(a=dffOut, b=dffOut, out=out);
}
