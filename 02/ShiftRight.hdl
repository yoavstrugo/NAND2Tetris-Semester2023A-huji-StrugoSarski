// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * 16-bit right-shifter.
 *
 * The chip's output is a "right-shift" of the input:
 * - Every input bit is moved one position to the right
 * - A new bit which is equal to the sign bit is inserted as the left-most bit
 *
 * For example:
 * ShiftRight(0000000000000001)=0000000000000000 // ShiftRight(1)=0
 * ShiftRight(0100000000000000)=0010000000000000
 * ShiftRight(1100000000000000)=1110000000000000
 *
 * Note that this operation is (usually) equivalent to dividing the input by 2.
 * This definition is also called an arithmetic right-shift, and is useful for
 * the efficient implementation of various operations which we will see later on
 * in the course.
 * Another variant is the logical right-shift, which always inserts a new '0'
 * bit.
 */

CHIP ShiftRight {
    IN in[16];
    OUT out[16];
     
    PARTS:
    Xor(a=in[1], b=false, out=out[0]);
    Xor(a=in[2], b=false, out=out[1]);
    Xor(a=in[3], b=false, out=out[2]);
    Xor(a=in[4], b=false, out=out[3]);
    Xor(a=in[5], b=false, out=out[4]);
    Xor(a=in[6], b=false, out=out[5]);
    Xor(a=in[7], b=false, out=out[6]);
    Xor(a=in[8], b=false, out=out[7]);
    Xor(a=in[9], b=false, out=out[8]);
    Xor(a=in[10], b=false, out=out[9]);
    Xor(a=in[11], b=false, out=out[10]);
    Xor(a=in[12], b=false, out=out[11]);
    Xor(a=in[13], b=false, out=out[12]);
    Xor(a=in[14], b=false, out=out[13]);
    Xor(a=in[15], b=false, out=out[14]);
    Xor(a=in[15], b=false, out=out[15]);
    
}